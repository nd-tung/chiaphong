#!/usr/bin/env python3

import os
import subprocess
import tempfile
from pdf2image import convert_from_path
from PIL import Image

def excel_to_image(excel_path, image_path, sheet_name=None):
    """Convert Excel file to image via Excel → PDF → PNG"""
    try:
        # Create temporary directory for intermediate files
        with tempfile.TemporaryDirectory() as temp_dir:
            # Step 1: Convert Excel to PDF using LibreOffice
            pdf_path = os.path.join(temp_dir, 'temp.pdf')
            
            print(f"Converting Excel to PDF: {excel_path} → {pdf_path}")
            
            # Use LibreOffice to convert Excel to PDF
            cmd = [
                '/opt/homebrew/bin/soffice',  # LibreOffice command
                '--headless',                  # Run without GUI
                '--convert-to', 'pdf',         # Convert to PDF format
                '--outdir', temp_dir,          # Output directory
                excel_path                     # Input Excel file
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=60)
            
            if result.returncode != 0:
                print(f"LibreOffice conversion failed:")
                print(f"stdout: {result.stdout}")
                print(f"stderr: {result.stderr}")
                return False
            
            # Find the generated PDF file (LibreOffice might name it differently)
            pdf_files = [f for f in os.listdir(temp_dir) if f.endswith('.pdf')]
            if not pdf_files:
                print("No PDF file was generated by LibreOffice")
                return False
            
            actual_pdf_path = os.path.join(temp_dir, pdf_files[0])
            print(f"PDF generated: {actual_pdf_path}")
            
            # Step 2: Convert PDF to PNG using pdf2image
            print(f"Converting PDF to PNG: {actual_pdf_path} → {image_path}")
            
            # Convert PDF to images (high DPI for better quality)
            images = convert_from_path(
                actual_pdf_path,
                dpi=200,           # High resolution
                fmt='PNG',         # Output format
                first_page=1,      # Only convert first page
                last_page=1
            )
            
            if not images:
                print("No images were generated from PDF")
                return False
            
            # Save the first (and only) page as PNG
            image = images[0]
            
            # Optional: Crop white space around the content
            # Convert to RGB if not already
            if image.mode != 'RGB':
                image = image.convert('RGB')
            
            # Save the image
            image.save(image_path, 'PNG', quality=95, optimize=True)
            
            print(f"Successfully created: {image_path}")
            print(f"Image dimensions: {image.size[0]}x{image.size[1]}")
            
            return True
            
    except subprocess.TimeoutExpired:
        print("LibreOffice conversion timed out (>60s)")
        return False
    except Exception as e:
        print(f"Error converting Excel to image: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

def excel_to_image_with_cropping(excel_path, image_path, sheet_name=None):
    """Convert Excel to image and crop whitespace"""
    try:
        # First convert normally
        if not excel_to_image(excel_path, image_path, sheet_name):
            return False
        
        # Load the image and crop whitespace
        image = Image.open(image_path)
        
        # Convert to RGB if needed
        if image.mode != 'RGB':
            image = image.convert('RGB')
        
        # Find the bounding box of non-white content
        # This removes excessive white borders
        bbox = image.getbbox()
        
        if bbox:
            # Add some padding around the content
            padding = 20
            left, top, right, bottom = bbox
            
            # Ensure we don't go outside image bounds
            left = max(0, left - padding)
            top = max(0, top - padding)
            right = min(image.width, right + padding)
            bottom = min(image.height, bottom + padding)
            
            # Crop the image
            cropped = image.crop((left, top, right, bottom))
            
            # Save the cropped image
            cropped.save(image_path, 'PNG', quality=95, optimize=True)
            
            print(f"Cropped image to {cropped.size[0]}x{cropped.size[1]}")
        
        return True
        
    except Exception as e:
        print(f"Error cropping image: {str(e)}")
        return False

def test_excel_to_image():
    """Test the Excel to image conversion"""
    excel_file = 'test_result.xlsx'
    image_file = 'test_result.png'
    
    if not os.path.exists(excel_file):
        print(f"❌ Excel file not found: {excel_file}")
        print("Run test_simple.py first to generate the Excel file")
        return
    
    print(f"Converting {excel_file} to {image_file}...")
    
    success = excel_to_image(excel_file, image_file)
    
    if success:
        print(f"✅ Successfully created: {image_file}")
        print(f"File size: {os.path.getsize(image_file)} bytes")
    else:
        print(f"❌ Failed to create image")

if __name__ == "__main__":
    test_excel_to_image()
